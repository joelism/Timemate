
(function(){
  const v=document.getElementById('view'); const byId=id=>document.getElementById(id);
  const CATS=[{key:"Spitex Heitersberg",css:"Spitex"},{key:"Psychologin / Therapie",css:"Psych"},{key:"Töpferhaus",css:"Töpferhaus"},{key:"Administrativ",css:"Administrativ"},{key:"Geschäftlich",css:"Geschäftlich"},{key:"Privat",css:"Privat"}];
  const state={items:JSON.parse(localStorage.getItem('tmjw_state')||'[]')}; const save=()=>localStorage.setItem('tmjw_state',JSON.stringify(state.items));
  const fmt=iso=>new Date(iso).toLocaleString('de-CH',{dateStyle:'medium',timeStyle:'short'}); const esc=s=>String(s).replace(/[&<>"']/g,m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
  // IndexedDB for attachments
  const DB='tmjw_files',STORE='files'; let dbp;
  function db(){ if(dbp) return dbp; dbp=new Promise((res,rej)=>{const r=indexedDB.open(DB,1); r.onupgradeneeded=e=>e.target.result.createObjectStore(STORE); r.onsuccess=e=>res(e.target.result); r.onerror=e=>rej(e);}); return dbp; }
  async function putFile(id,blob){const d=await db(); return new Promise((res,rej)=>{const tx=d.transaction(STORE,'readwrite'); tx.objectStore(STORE).put(blob,id); tx.oncomplete=()=>res(); tx.onerror=e=>rej(e);});}
  async function getFile(id){const d=await db(); return new Promise((res,rej)=>{const tx=d.transaction(STORE,'readonly'); const r=tx.objectStore(STORE).get(id); r.onsuccess=()=>res(r.result||null); r.onerror=e=>rej(e);});}
  function autoUpdate(){const now=Date.now(); let ch=false; state.items.forEach(a=>{const due=new Date(a.datetime).getTime(); if(a.status!=='archived'&&now>=due&&a.status!=='done'){a.status='done'; ch=true;} if(a.status!=='archived'&&now-due>259200000){a.status='archived'; ch=true;}}); if(ch) save();}
  function el(t,a={},txt){const n=document.createElement(t); Object.entries(a).forEach(([k,v])=>n.setAttribute(k,v)); if(txt!==undefined)n.textContent=txt; return n;}
  function route(name){document.querySelectorAll('.tabs .tab').forEach(b=>b.classList.toggle('active',b.dataset.route===name)); if(name==='overview')return ov(); if(name==='new')return form(); if(name==='list')return list(); if(name==='archive')return arch(); if(name==='settings')return settings();}
  function ov(){autoUpdate(); v.innerHTML=''; const g=el('section',{class:'grid'}); const up=state.items.filter(x=>x.status!=='archived'&&new Date(x.datetime)>new Date()).sort((a,b)=>new Date(a.datetime)-new Date(b.datetime));
    CATS.forEach(c=>{const card=el('div',{class:'card cat-'+c.css}); card.append(el('div',{class:'title'},c.key)); const next=up.find(x=>x.category===c.key);
      if(next){const p=Array.isArray(next.person)?next.person.join(', '):(next.person||'—'); card.append(el('div',{},next.title||'(ohne Titel)')); card.append(el('div',{},`${fmt(next.datetime)} · ${p} · ${next.location||''}`));
        const row=el('div',{class:'btnrow'}); const b1=el('button',{},next.status==='done'?'✓ Erledigt':'☑️ Abhaken'); b1.onclick=()=>{next.status=next.status==='done'?'upcoming':'done'; save(); ov();};
        const b2=el('button',{},'↪ Archivieren'); b2.onclick=()=>{next.status='archived'; save(); ov();}; row.append(b1,b2); card.append(row);
      } else { card.append(el('div',{},'❗️ Kein Termin eingetragen')); } g.append(card);}); v.append(g);}
  function form(){v.innerHTML=''; const s=el('section'); s.append(el('h2',{},'Neuen Termin anlegen'));
    const lT=el('label'); lT.append('Titel'); lT.append(el('input',{id:'title',type:'text',required:'true',placeholder:'z.B. Kontrolle beim Arzt'})); s.append(lT);
    const lC=el('label'); lC.append('Kategorie'); const sel=el('select',{id:'category',required:'true'}); sel.append(el('option',{value:'',disabled:'true',selected:'true'},'Bitte wählen…')); CATS.forEach(c=>sel.append(el('option',{},c.key))); lC.append(sel); s.append(lC);
    const dyn=el('div',{id:'dyn'}); s.append(dyn);
    const row=el('div',{class:'row'}); const lD=el('label',{class:'half'}); lD.append('Datum'); lD.append(el('input',{id:'date',type:'date',required:'true'})); row.append(lD);
    const lTi=el('label',{class:'half'}); lTi.append('Uhrzeit'); const ti=el('input',{id:'time',type:'time',step:'300',required:'true'}); ti.addEventListener('change',()=>{const [h,m]=ti.value.split(':').map(x=>parseInt(x||'0',10)); const mm=Math.round((m||0)/5)*5; ti.value=String(h).padStart(2,'0')+':'+String(mm%60).padStart(2,'0');}); lTi.append(ti); row.append(lTi); s.append(row);
    const lN=el('label'); lN.append('Notizen (Text)'); lN.append(el('textarea',{id:'notes',rows:'4',placeholder:'Kurznotiz…'})); s.append(lN);
    const lF=el('label'); lF.append('Anhänge (Bild/PDF)'); const inp=el('input',{id:'files',type:'file',accept:'image/*,application/pdf',multiple:'true'}); lF.append(inp); s.append(lF);
    const at=el('div',{class:'attach',id:'attachList'}); s.append(at);
    const saveBtn=el('button',{class:'primary'},'Speichern'); s.append(saveBtn); v.append(s);
    let tmp=[]; inp.addEventListener('change',async()=>{at.innerHTML=''; tmp=[]; for(const f of inp.files){const id='f_'+Date.now()+'_'+Math.random().toString(36).slice(2,8); await putFile(id,f); tmp.push({id,name:f.name,type:f.type,size:f.size}); const chip=el('span',{class:'chip'},f.name); at.append(chip);} });
    sel.addEventListener('change',()=>fd(sel.value,dyn));
    saveBtn.onclick=()=>{const title=byId('title').value.trim(),cat=byId('category').value,date=byId('date').value,time=byId('time').value;
      if(!title||!cat||!date||!time){alert('Bitte Titel, Kategorie, Datum und Uhrzeit angeben.');return;}
      const person=byId('personMulti')?Array.from(byId('personMulti').selectedOptions).map(o=>o.value):(byId('personOther')&&byId('personOther').style.display==='block'?byId('personOther').value:(byId('person')?byId('person').value:''));
      const loc=byId('location')?byId('location').value:''; const dt=new Date(`${date}T${time}:00`);
      state.items.push({id:String(Date.now()),title,category:cat,person,location:loc,datetime:dt.toISOString(),notes:byId('notes').value,status:'upcoming',attachments:tmp}); save(); alert('Termin gespeichert.'); route('overview'); };
  }
  function fd(cat,d){d.innerHTML=''; const mk=h=>{const x=document.createElement('div'); x.innerHTML=h; return x.firstElementChild;};
    if(cat==='Spitex Heitersberg'){d.append(mk('<label>Termin mit<select id="person"><option>F. Völki</option><option>A. Rudgers</option><option>Andere</option></select></label>')); d.append(mk('<label>Standort<select id="location"><option>5000 Aarau</option><option>5200 Brugg</option><option>5442 Fislisbach</option><option>5507 Mellingen</option></select></label>')); d.append(mk('<input id="personOther" placeholder="Andere (Name)" style="display:none;">')); d.querySelector('#person').addEventListener('change',()=> d.querySelector('#personOther').style.display=d.querySelector('#person').value==='Andere'?'block':'none');}
    else if(cat==='Töpferhaus'){d.append(mk('<label>Termin mit<select id="person"><option>Caroline Hanst</option><option>Jeanine Haygis</option><option>Sandra Schriber</option><option>Andere</option></select></label>')); d.append(mk('<label>Standort<select id="location"><option>5000 Aarau - Bleichmattstr.</option><option>5000 Aarau - Bachstr. 95</option></select></label>')); d.append(mk('<input id="personOther" placeholder="Andere (Name)" style="display:none;">')); d.querySelector('#person').addEventListener('change',()=> d.querySelector('#personOther').style.display=d.querySelector('#person').value==='Andere'?'block':'none');}
    else if(cat==='Geschäftlich'){d.append(mk('<label>Termin mit (Mehrfachauswahl)<select id="personMulti" multiple size="6"><option>Beatriz Häsler</option><option>Helena Huser</option><option>Jasmin Widmer</option><option>Linda Flückiger</option><option>Mathias Tomaske</option><option>Svenja Studer</option></select></label>')); d.append(mk('<label>Standort<select id="location"><option>5000 Aarau</option><option>3322 Schönbühl</option></select></label>'));}
    else if(cat==='Administrativ'){d.append(mk('<label>Person<input id="person" placeholder="Name"></label>')); d.append(mk('<label>Standort<input id="location" list="locs"></label>'));}
    else if(cat==='Privat'){d.append(mk('<label>Person<input id="person" list="persons"></label>')); d.append(mk('<label>Standort<input id="location" list="locs"></label>'));}
    else if(cat==='Psychologin / Therapie'){d.append(mk('<label>Termin mit<input id="person" placeholder="Name"></label>')); d.append(mk('<label>Standort<input id="location" placeholder="Ort / Adresse"></label>'));}
  }
  async function list(){autoUpdate(); v.innerHTML='<section><h2>Alle Termine</h2><div id="list" class="list"></div></section>'; const list=byId('list'); const all=state.items.slice().sort((a,b)=>new Date(a.datetime)-new Date(b.datetime));
    if(!all.length){list.innerHTML='<p class="muted small">Keine Termine.</p>'; return;} for(const a of all){const it=el('div',{class:'item'}); const p=Array.isArray(a.person)?a.person.join(', '):(a.person||'—');
      it.append(el('div',{class:'title'},a.title||'(ohne Titel)')); it.append(el('div',{},`${a.category} • ${fmt(a.datetime)} ${a.status==='done'?'✓':''} ${a.status==='archived'?'(Archiv)':''}`)); it.append(el('div',{},`Person(en): ${p}`));
      it.append(el('div',{},`Standort: ${a.location||'—'}`)); it.append(el('div',{},`Notizen: ${esc(a.notes||'—')}`));
      const at=el('div',{class:'attach'}); if(a.attachments&&a.attachments.length){for(const f of a.attachments){const chip=el('span',{class:'chip'},f.name); chip.style.cursor='pointer'; chip.onclick=async()=>{const blob=await getFile(f.id); if(!blob){alert('Datei nicht gefunden');return;} const url=URL.createObjectURL(blob); window.open(url,'_blank'); setTimeout(()=>URL.revokeObjectURL(url),10000);}; at.append(chip);} } it.append(at);
      const row=el('div',{class:'btnrow'}); const b1=el('button',{},a.status==='done'?'Als unerledigt markieren':'☑️ Abhaken'); b1.onclick=()=>{a.status=a.status==='done'?'upcoming':'done'; save(); list();};
      const b2=el('button',{},'↪ Archivieren'); b2.onclick=()=>{a.status='archived'; save(); list();}; row.append(b1,b2); it.append(row); list.append(it);}}
  function arch(){autoUpdate(); v.innerHTML='<section><h2>Archiv</h2><div id="arch" class="list"></div></section>'; const arch=byId('arch'); const arr=state.items.filter(a=>a.status==='archived').sort((a,b)=>new Date(b.datetime)-new Date(a.datetime));
    if(!arr.length){arch.innerHTML='<p class="muted small">Archiv ist leer.</p>'; return;} arr.forEach(a=>{const it=el('div',{class:'item'}); const p=Array.isArray(a.person)?a.person.join(', '):(a.person||'—'); it.append(el('div',{class:'title'},a.title||'(ohne Titel)'));
      it.append(el('div',{},`${a.category} • ${fmt(a.datetime)} ✓`)); it.append(el('div',{},`Person(en): ${p}`)); it.append(el('div',{},`Standort: ${a.location||'—'}`)); it.append(el('div',{},`Notizen: ${esc(a.notes||'—')}`));
      const row=el('div',{class:'btnrow'}); const back=el('button',{},'↩︎ Zurückholen'); back.onclick=()=>{a.status='upcoming'; save(); arch();}; row.append(back); it.append(row); arch.append(it);});}
  function exportCSV(){const rows=[["Titel","Kategorie","Datum","Uhrzeit","Person(en)","Standort","Notizen","Status","Anhänge"]]; const all=state.items.slice().sort((a,b)=>new Date(a.datetime)-new Date(b.datetime));
    all.forEach(a=>{const d=new Date(a.datetime); const date=d.toLocaleDateString('de-CH'); const time=d.toLocaleTimeString('de-CH',{hour:'2-digit',minute:'2-digit'}); const p=Array.isArray(a.person)?a.person.join('; '):(a.person||''); const files=(a.attachments||[]).map(x=>x.name).join('; ');
      rows.push([a.title||'',a.category,date,time,p,a.location||'',String(a.notes||'').replace(/\n/g,' '),a.status,files]);}); const csv=rows.map(r=>r.map(x=>`"${String(x).replace(/"/g,'""')}"`).join(';')).join('\r\n');
    const blob=new Blob([csv],{type:'text/csv;charset=utf-8'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='TimeMateJW_Export.csv'; a.click(); URL.revokeObjectURL(url);}
  function exportPrint(){const all=state.items.slice().sort((a,b)=>new Date(a.datetime)-new Date(b.datetime)); const rows=all.map(a=>{const d=fmt(a.datetime); const p=Array.isArray(a.person)?a.person.join(', '):(a.person||'—'); const files=(a.attachments||[]).map(x=>x.name).join(', ');
    return `<tr><td>${esc(a.title||'—')}</td><td>${a.category}</td><td>${d}</td><td>${esc(p)}</td><td>${esc(a.location||'—')}</td><td>${esc(a.notes||'—')}</td><td>${a.status}</td><td>${esc(files)}</td></tr>`;}).join('');
    const html=`<!doctype html><html><head><meta charset="utf-8"><title>TimeMate JW Export</title><style>body{font-family:-apple-system,Segoe UI,Roboto,Arial;padding:24px}table{border-collapse:collapse;width:100%}th,td{border:1px solid #e5e7eb;padding:6px 8px}th{background:#f3f4f6}</style></head><body onload="setTimeout(function(){window.print()},300)"><h1>TimeMate JW – Export</h1><table><thead><tr><th>Titel</th><th>Kategorie</th><th>Datum & Uhrzeit</th><th>Person(en)</th><th>Standort</th><th>Notizen</th><th>Status</th><th>Dateien</th></tr></thead><tbody>${rows}</tbody></table></body></html>`;
    const w=window.open('','_blank'); w.document.write(html); w.document.close();}
  function settings(){v.innerHTML=`<section><h2>Einstellungen</h2><div class="btnrow"><button id="exp-csv">Als Excel/CSV exportieren</button><button id="exp-pdf">Als PDF exportieren (Druckansicht)</button><button id="wipe" class="danger">Alle Termine löschen</button></div></section>`;
    document.getElementById('exp-csv').onclick=exportCSV; document.getElementById('exp-pdf').onclick=exportPrint; document.getElementById('wipe').onclick=async()=>{ if(confirm('Wirklich alles löschen?')){ const d=await db(); await new Promise((res,rej)=>{const tx=d.transaction('files','readwrite'); const st=tx.objectStore('files'); st.clear(); tx.oncomplete=()=>res(); tx.onerror=e=>rej(e);}); state.items=[]; save(); alert('Gelöscht.'); route('overview'); } };}
  document.querySelectorAll('.tabs .tab').forEach(b=>b.addEventListener('click',()=>route(b.dataset.route))); route('overview');
})();
